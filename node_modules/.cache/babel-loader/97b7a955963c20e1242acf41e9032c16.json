{"ast":null,"code":"var _jsxFileName = \"/Users/michaelsweeney/Documents/GitHub/NYC-BeEx-Carbon/src/components/barchart.js\";\nimport React from 'react';\nimport { stack, max, scaleOrdinal, scaleLinear, axisLeft, axisBottom, select, scaleBand, selectAll, sum } from 'd3';\nimport { formatInt } from './numformat.js';\n\nclass BarChart extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.createBarChart = () => {\n      // parse data\n      let {\n        total_cost,\n        fine_2024,\n        fine_2030,\n        fine_2035\n      } = this.props.barprops;\n      let datatostack = [{\n        period: '2024',\n        utility: total_cost,\n        fine: fine_2024,\n        util_and_fine: fine_2024 + total_cost\n      }, {\n        period: '2030',\n        utility: total_cost,\n        fine: fine_2030,\n        util_and_fine: fine_2030 + total_cost\n      }, {\n        period: '2035',\n        utility: total_cost,\n        fine: fine_2035,\n        util_and_fine: fine_2035 + total_cost\n      }];\n      let colors = {\n        fine: \"#333333\",\n        utility: \"BAD636\"\n      };\n      let keys = ['utility', 'fine'];\n      let data = stack().keys(keys)(datatostack);\n      let xmax = 0;\n      data.forEach(d => {\n        d.forEach(s => {\n          xmax = max([xmax, s[0], s[1]]);\n        });\n      }); // d3 logic\n\n      let duration = 500;\n      let width = 300;\n      let height = 400;\n      let margins = {\n        t: 30,\n        b: 200,\n        r: 100,\n        l: 30\n      };\n      let plotwidth = width - margins.l - margins.r;\n      let plotheight = height - margins.t - margins.b;\n      let svg = select(this.container).selectAll('svg').data([0]).join('svg').attr('width', width).attr('height', height);\n      svg.selectAll('.x-axis').data([0]).join('g').attr('class', 'x-axis').attr('transform', `translate(${margins.l}, ${plotheight + margins.t})`);\n      svg.selectAll('.y-axis').data([0]).join('g').attr('class', 'y-axis').attr('transform', `translate(${margins.l}, ${margins.t})`);\n      let yScale = scaleBand().domain(['2024', '2030', '2035']).rangeRound([0, plotheight]);\n      let xScale = scaleLinear().domain([xmax, 0]).range([plotwidth, 0]);\n      let xAxis = axisBottom().scale(xScale).ticks(5);\n      let yAxis = axisLeft().scale(yScale).ticks(3).tickSize(0).tickSizeOuter(0);\n      svg.select('.y-axis').call(yAxis); // svg.select('.x-axis')\n      //     .transition().duration(duration)\n      //     .call(xAxis)\n\n      let groups = svg.selectAll(\".bar\").data(data, d => d.key).join('g').attr(\"class\", \"bar\").attr(`transform`, `translate(${margins.l}, ${margins.t})`).style(\"fill\", function (d, i) {\n        return colors[d.key];\n      });\n      let rects = groups.selectAll(\"rect\").data(d => {\n        return d;\n      }).join('rect').attr(\"y\", (d, i) => {\n        return yScale(d.data.period) + 15;\n      }).transition().duration(duration).attr(\"x\", d => {\n        return xScale(d[0]);\n      }).attr(\"width\", d => {\n        return xScale(d[1]) - xScale(d[0]);\n      }).attr(\"height\", 25);\n      let labels = svg.selectAll(\".label\").data(datatostack, d => d.period).join(\"text\").attr(`transform`, `translate(${margins.l}, ${margins.t})`).attr(\"class\", \"label\").attr(\"text-anchor\", \"start\").transition().duration(duration).attr(\"x\", d => {\n        return xScale(d.util_and_fine) + 5;\n      }).attr(\"y\", d => {\n        return yScale(d.period) + 30;\n      }).text(d => {\n        if (d.util_and_fine == 0) {\n          return '';\n        }\n\n        return '$' + formatInt(d.util_and_fine);\n      }); // Draw legend\n\n      let legend = svg.selectAll(\".legend\").data([0]).join('g').attr('class', 'legend').join('g').attr('class', 'legend').attr('transform', `translate(${margins.l}, ${plotheight + margins.t + 20})`);\n      legend.selectAll('rect').data(Object.keys(colors)).join('rect').attr(\"x\", 15).attr(\"y\", (d, i) => {\n        return i * 30;\n      }).attr(\"width\", 18).attr(\"height\", 18).style(\"fill\", (d, i) => {\n        return colors[d];\n      });\n      legend.selectAll('text').data(Object.keys(colors)).join('text').attr(\"x\", 50).attr(\"y\", (d, i) => {\n        return i * 30 + 15;\n      }).attr('class', 'legend-text').style(\"text-anchor\", \"start\").text((d, i) => {\n        switch (d) {\n          case 'utility':\n            return \"Utility Cost ($)\";\n\n          case 'fine':\n            return \"Carbon Fine ($)\";\n        }\n      }); // // Prep the tooltip bits, initial display is hidden\n      // var tooltip = svg.append(\"g\")\n      //     .attr(\"class\", \"tooltip\")\n      //     .style(\"display\", \"none\");\n      // tooltip.append(\"rect\")\n      //     .attr(\"width\", 30)\n      //     .attr(\"height\", 20)\n      //     .attr(\"fill\", \"white\")\n      //     .style(\"opacity\", 0.5);\n      // tooltip.append(\"text\")\n      //     .attr(\"x\", 15)\n      //     .attr(\"dy\", \"1.2em\")\n      //     .style(\"text-anchor\", \"middle\")\n      //     .attr(\"font-size\", \"12px\")\n      //     .attr(\"font-weight\", \"bold\");\n    };\n  }\n\n  componentDidMount() {\n    this.createBarChart();\n  }\n\n  componentDidUpdate() {\n    this.createBarChart();\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      ref: container => this.container = container,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195\n      },\n      __self: this\n    });\n  }\n\n}\n\nexport { BarChart };","map":{"version":3,"sources":["/Users/michaelsweeney/Documents/GitHub/NYC-BeEx-Carbon/src/components/barchart.js"],"names":["React","stack","max","scaleOrdinal","scaleLinear","axisLeft","axisBottom","select","scaleBand","selectAll","sum","formatInt","BarChart","Component","constructor","props","createBarChart","total_cost","fine_2024","fine_2030","fine_2035","barprops","datatostack","period","utility","fine","util_and_fine","colors","keys","data","xmax","forEach","d","s","duration","width","height","margins","t","b","r","l","plotwidth","plotheight","svg","container","join","attr","yScale","domain","rangeRound","xScale","range","xAxis","scale","ticks","yAxis","tickSize","tickSizeOuter","call","groups","key","style","i","rects","transition","labels","text","legend","Object","componentDidMount","componentDidUpdate","render"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {\n    stack,\n    max,\n    scaleOrdinal,\n    scaleLinear,\n    axisLeft,\n    axisBottom,\n    select,\n    scaleBand,\n    selectAll,\n    sum\n} from 'd3'\nimport { formatInt } from './numformat.js'\n\n\n\nclass BarChart extends React.Component {\n    constructor(props) {\n        super(props)\n    }\n    componentDidMount() {\n        this.createBarChart()\n    }\n    componentDidUpdate() {\n        this.createBarChart()\n    }\n    createBarChart = () => {\n        // parse data\n        let {\n            total_cost,\n            fine_2024,\n            fine_2030,\n            fine_2035\n        } = this.props.barprops\n\n        let datatostack = [\n            { period: '2024', utility: total_cost, fine: fine_2024, util_and_fine: fine_2024 + total_cost },\n            { period: '2030', utility: total_cost, fine: fine_2030, util_and_fine: fine_2030 + total_cost },\n            { period: '2035', utility: total_cost, fine: fine_2035, util_and_fine: fine_2035 + total_cost },\n        ]\n\n        let colors = { fine: \"#333333\", utility: \"BAD636\" };\n        let keys = ['utility', 'fine']\n\n        let data = stack().keys(keys)(datatostack)\n        let xmax = 0\n        data.forEach((d) => {\n            d.forEach((s) => {\n                xmax = max([xmax, s[0], s[1]])\n            })\n        })\n        // d3 logic\n        let duration = 500\n        let width = 300;\n        let height = 400;\n        let margins = {\n            t: 30,\n            b: 200,\n            r: 100,\n            l: 30\n        }\n\n        let plotwidth = width - margins.l - margins.r\n        let plotheight = height - margins.t - margins.b\n\n        let svg = select(this.container).selectAll('svg').data([0]).join('svg')\n            .attr('width', width).attr('height', height)\n\n        svg.selectAll('.x-axis').data([0]).join('g')\n            .attr('class', 'x-axis')\n            .attr('transform', `translate(${margins.l}, ${plotheight + margins.t})`)\n\n        svg.selectAll('.y-axis').data([0]).join('g')\n            .attr('class', 'y-axis')\n            .attr('transform', `translate(${margins.l}, ${margins.t})`)\n\n        let yScale = scaleBand()\n            .domain(['2024', '2030', '2035'])\n            .rangeRound([0, plotheight])\n\n        let xScale = scaleLinear()\n            .domain([xmax, 0])\n            .range([plotwidth, 0])\n\n        let xAxis = axisBottom()\n            .scale(xScale)\n            .ticks(5)\n\n        let yAxis = axisLeft()\n            .scale(yScale)\n            .ticks(3)\n            .tickSize(0)\n            .tickSizeOuter(0)\n\n        svg.select('.y-axis')\n            .call(yAxis)\n\n\n        // svg.select('.x-axis')\n        //     .transition().duration(duration)\n        //     .call(xAxis)\n\n        let groups = svg.selectAll(\".bar\")\n            .data(data, d => d.key)\n            .join('g')\n            .attr(\"class\", \"bar\")\n            .attr(`transform`, `translate(${margins.l}, ${margins.t})`)\n            .style(\"fill\", function (d, i) { return colors[d.key]; });\n\n        let rects = groups.selectAll(\"rect\").data((d) => { return d })\n            .join('rect')\n            .attr(\"y\", (d, i) => { return yScale(d.data.period) + 15 })\n            .transition().duration(duration)\n            .attr(\"x\", (d) => { return xScale(d[0]); })\n            .attr(\"width\", (d) => { return xScale(d[1]) - xScale(d[0]); })\n            .attr(\"height\", 25)\n\n\n        let labels = svg.selectAll(\".label\")\n            .data(datatostack, (d) => d.period)\n            .join(\"text\")\n            .attr(`transform`, `translate(${margins.l}, ${margins.t})`)\n            .attr(\"class\", \"label\")\n            .attr(\"text-anchor\", \"start\")\n            .transition().duration(duration)\n            .attr(\"x\", (d) => {\n                return xScale(d.util_and_fine) + 5\n            })\n            .attr(\"y\", (d) => {\n                return yScale(d.period) + 30\n            })\n            .text((d) => {\n                if (d.util_and_fine == 0) {\n                    return ''\n                }\n                return '$' + formatInt(d.util_and_fine)\n            })\n\n\n\n        // Draw legend\n        let legend = svg.selectAll(\".legend\").data([0]).join('g').attr('class', 'legend')\n            .join('g')\n            .attr('class', 'legend')\n            .attr('transform', `translate(${margins.l}, ${plotheight + margins.t + 20})`)\n\n        legend.selectAll('rect').data(Object.keys(colors)).join('rect')\n            .attr(\"x\", 15)\n            .attr(\"y\", (d, i) => { return i * 30 })\n            .attr(\"width\", 18)\n            .attr(\"height\", 18)\n            .style(\"fill\", (d, i) => { return colors[d]; });\n\n        legend.selectAll('text').data(Object.keys(colors)).join('text')\n            .attr(\"x\", 50)\n            .attr(\"y\", (d, i) => { return (i * 30) + 15 })\n            .attr('class', 'legend-text')\n            .style(\"text-anchor\", \"start\")\n            .text((d, i) => {\n                switch (d) {\n                    case 'utility': return \"Utility Cost ($)\";\n                    case 'fine': return \"Carbon Fine ($)\";\n                }\n            });\n\n\n\n\n        // // Prep the tooltip bits, initial display is hidden\n        // var tooltip = svg.append(\"g\")\n        //     .attr(\"class\", \"tooltip\")\n        //     .style(\"display\", \"none\");\n\n        // tooltip.append(\"rect\")\n        //     .attr(\"width\", 30)\n        //     .attr(\"height\", 20)\n        //     .attr(\"fill\", \"white\")\n        //     .style(\"opacity\", 0.5);\n\n        // tooltip.append(\"text\")\n        //     .attr(\"x\", 15)\n        //     .attr(\"dy\", \"1.2em\")\n        //     .style(\"text-anchor\", \"middle\")\n        //     .attr(\"font-size\", \"12px\")\n        //     .attr(\"font-weight\", \"bold\");\n\n\n\n\n\n\n    }\n    render() {\n        return <div ref={container => this.container = container}></div>\n    }\n}\n\n\n\nexport { BarChart }"]},"metadata":{},"sourceType":"module"}