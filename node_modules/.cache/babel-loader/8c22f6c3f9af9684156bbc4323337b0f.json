{"ast":null,"code":"const compileBuilding = building => {\n  const co2limitsbybuildingtype = {\n    A: [0.01074, 0.0042, 0.0014],\n    B_health: [0.02381, 0.0133, 0.0014],\n    B_norm: [0.00846, 0.00453, 0.0014],\n    E: [0.00758, 0.00344, 0.0014],\n    F: [0.00574, 0.00167, 0.0014],\n    H: [0.02381, 0.01193, 0.0014],\n    I1: [0.01138, 0.00598, 0.0014],\n    I2: [0.02381, 0.01193, 0.0014],\n    I3: [0.02381, 0.01193, 0.0014],\n    I4: [0.00758, 0.00344, 0.0014],\n    M: [0.01181, 0.00403, 0.0014],\n    R1: [0.00987, 0.00526, 0.0014],\n    R2: [0.00675, 0.00407, 0.0014],\n    S: [0.00426, 0.0011, 0.0014],\n    U: [0.00426, 0.0011, 0.0014]\n  };\n  let area = 0;\n  let co2limit_2024 = 0;\n  let co2limit_2030 = 0;\n  let co2limit_2035 = 0;\n  let fine_per_ton_co2 = 268;\n  let types = building.types;\n  let utilities = building.utilities;\n  Object.values(types).forEach(type => {\n    let limit_2024 = +co2limitsbybuildingtype[type.type][0] * +type.area;\n    let limit_2030 = +co2limitsbybuildingtype[type.type][1] * +type.area;\n    let limit_2035 = +co2limitsbybuildingtype[type.type][2] * +type.area;\n    co2limit_2024 = co2limit_2024 + limit_2024;\n    co2limit_2030 = co2limit_2030 + limit_2030;\n    co2limit_2035 = co2limit_2035 + limit_2035;\n    area = area + +type.area;\n  });\n  let elec_kbtu = +utilities.elec.cons * 3.412;\n  let gas_kbtu = +utilities.gas.cons * 100;\n  let steam_kbtu = +utilities.steam.cons * 1194;\n  let fuel_two_kbtu = +utilities.fuel_two.cons * 138;\n  let fuel_four_kbtu = +utilities.fuel_four.cons * 146;\n  let elec_carbon = elec_kbtu * 0.000084689;\n  let gas_carbon = gas_kbtu * 0.00005311;\n  let steam_carbon = steam_kbtu * 0.00004493;\n  let fuel_two_carbon = fuel_two_kbtu * 0.00007421;\n  let fuel_four_carbon = fuel_four_kbtu * 0.00007529;\n  let elec_cost = +utilities.elec.cons * +utilities.elec.rate;\n  let gas_cost = +utilities.gas.cons * +utilities.gas.rate;\n  let steam_cost = +utilities.steam.cons * +utilities.steam.rate;\n  let fuel_two_cost = +utilities.fuel_two.cons * +utilities.fuel_two.rate;\n  let fuel_four_cost = +utilities.fuel_four.cons * +utilities.fuel_four.rate;\n  let elec_kbtu_norm = elec_kbtu / area;\n  let gas_kbtu_norm = gas_kbtu / area;\n  let steam_kbtu_norm = steam_kbtu / area;\n  let fuel_two_kbtu_norm = fuel_two_kbtu / area;\n  let fuel_four_kbtu_norm = fuel_four_kbtu / area;\n  let elec_carbon_norm = elec_carbon / area;\n  let gas_carbon_norm = gas_carbon / area;\n  let steam_carbon_norm = steam_carbon / area;\n  let fuel_two_carbon_norm = fuel_two_carbon / area;\n  let fuel_four_carbon_norm = fuel_four_carbon / area;\n  let elec_cost_norm = elec_cost / area;\n  let gas_cost_norm = gas_cost / area;\n  let steam_cost_norm = steam_cost / area;\n  let fuel_two_cost_norm = fuel_two_cost / area;\n  let fuel_four_cost_norm = fuel_four_cost / area;\n  let total_cost = elec_cost + gas_cost + steam_cost + fuel_two_cost + fuel_four_cost;\n  let total_carbon = elec_carbon + gas_carbon + steam_carbon + fuel_two_carbon + fuel_four_carbon;\n  let fine_2024 = total_carbon > co2limit_2024 ? (total_carbon - co2limit_2024) * fine_per_ton_co2 : 0;\n  let fine_2030 = total_carbon > co2limit_2030 ? (total_carbon - co2limit_2030) * fine_per_ton_co2 : 0;\n  let fine_2035 = total_carbon > co2limit_2035 ? (total_carbon - co2limit_2035) * fine_per_ton_co2 : 0;\n  let compiled = {\n    summary: {\n      total_carbon: total_carbon,\n      total_cost: total_cost,\n      total_area: area,\n      co2limit_2024: co2limit_2024,\n      co2limit_2030: co2limit_2030,\n      co2limit_2035: co2limit_2035,\n      fine_2024: fine_2024,\n      fine_2030: fine_2030,\n      fine_2035: fine_2035\n    },\n    utilities: {\n      native: {\n        elec: +utilities.elec.cons,\n        gas: +utilities.gas.cons,\n        steam: +utilities.steam.cons,\n        fuel_two: +utilities.fuel_two.cons,\n        fuel_four: +utilities.fuel_four.cons\n      },\n      rates: {\n        elec: +utilities.elec.rate,\n        gas: +utilities.gas.rate,\n        steam: +utilities.steam.rate,\n        fuel_two: +utilities.fuel_two.rate,\n        fuel_four: +utilities.fuel_four.rate\n      },\n      kbtu: {\n        elec: elec_kbtu,\n        gas: gas_kbtu,\n        steam: steam_kbtu,\n        fuel_two: fuel_two_kbtu,\n        fuel_four: fuel_four_kbtu\n      },\n      carbon: {\n        elec: elec_carbon,\n        gas: gas_carbon,\n        steam: steam_carbon,\n        fuel_two: fuel_two_carbon,\n        fuel_four: fuel_four_carbon\n      },\n      cost: {\n        elec: elec_cost,\n        gas: gas_cost,\n        steam: steam_cost,\n        fuel_two: fuel_two_cost,\n        fuel_four: fuel_four_cost\n      },\n      cost_sf: {\n        elec: elec_cost_norm,\n        gas: gas_cost_norm,\n        steam: steam_cost_norm,\n        fuel_two: fuel_two_cost_norm,\n        fuel_four: fuel_four_cost_norm\n      },\n      kbtu_sf: {\n        elec: elec_kbtu_norm,\n        gas: gas_kbtu_norm,\n        steam: steam_kbtu_norm,\n        fuel_two: fuel_two_kbtu_norm,\n        fuel_four: fuel_four_kbtu_norm\n      },\n      carbon_sf: {\n        elec: elec_carbon_norm,\n        gas: gas_carbon_norm,\n        steam: steam_carbon_norm,\n        fuel_two: fuel_two_carbon_norm,\n        fuel_four: fuel_four_carbon_norm\n      }\n    }\n  };\n  return compiled;\n};\n\nexport { compileBuilding };","map":{"version":3,"sources":["/Users/michaelsweeney/Documents/GitHub/NYC-BeEx-Carbon/src/components/compilebuilding.js"],"names":["compileBuilding","building","co2limitsbybuildingtype","A","B_health","B_norm","E","F","H","I1","I2","I3","I4","M","R1","R2","S","U","area","co2limit_2024","co2limit_2030","co2limit_2035","fine_per_ton_co2","types","utilities","Object","values","forEach","type","limit_2024","limit_2030","limit_2035","elec_kbtu","elec","cons","gas_kbtu","gas","steam_kbtu","steam","fuel_two_kbtu","fuel_two","fuel_four_kbtu","fuel_four","elec_carbon","gas_carbon","steam_carbon","fuel_two_carbon","fuel_four_carbon","elec_cost","rate","gas_cost","steam_cost","fuel_two_cost","fuel_four_cost","elec_kbtu_norm","gas_kbtu_norm","steam_kbtu_norm","fuel_two_kbtu_norm","fuel_four_kbtu_norm","elec_carbon_norm","gas_carbon_norm","steam_carbon_norm","fuel_two_carbon_norm","fuel_four_carbon_norm","elec_cost_norm","gas_cost_norm","steam_cost_norm","fuel_two_cost_norm","fuel_four_cost_norm","total_cost","total_carbon","fine_2024","fine_2030","fine_2035","compiled","summary","total_area","native","rates","kbtu","carbon","cost","cost_sf","kbtu_sf","carbon_sf"],"mappings":"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","sourcesContent":["\n\nconst compileBuilding = (building) => {\n    const co2limitsbybuildingtype = {\n      A: [0.01074, 0.0042, 0.0014],\n      B_health: [0.02381, 0.0133, 0.0014],\n      B_norm: [0.00846, 0.00453, 0.0014],\n      E: [0.00758, 0.00344, 0.0014],\n      F: [0.00574, 0.00167, 0.0014],\n      H: [0.02381, 0.01193, 0.0014],\n      I1: [0.01138, 0.00598, 0.0014],\n      I2: [0.02381, 0.01193, 0.0014],\n      I3: [0.02381, 0.01193, 0.0014],\n      I4: [0.00758, 0.00344, 0.0014],\n      M: [0.01181, 0.00403, 0.0014],\n      R1: [0.00987, 0.00526, 0.0014],\n      R2: [0.00675, 0.00407, 0.0014],\n      S: [0.00426, 0.0011, 0.0014],\n      U: [0.00426, 0.0011, 0.0014],\n    }\n  \n    let area = 0;\n    let co2limit_2024 = 0;\n    let co2limit_2030 = 0;\n    let co2limit_2035 = 0;\n    let fine_per_ton_co2 = 268;\n  \n    let types = building.types;\n    let utilities = building.utilities\n  \n    Object.values(types).forEach((type) => {\n      let limit_2024 = +co2limitsbybuildingtype[type.type][0] * +type.area\n      let limit_2030 = +co2limitsbybuildingtype[type.type][1] * +type.area\n      let limit_2035 = +co2limitsbybuildingtype[type.type][2] * +type.area\n      co2limit_2024 = co2limit_2024 + limit_2024\n      co2limit_2030 = co2limit_2030 + limit_2030\n      co2limit_2035 = co2limit_2035 + limit_2035\n      area = area + +type.area\n    })\n  \n    let elec_kbtu = +utilities.elec.cons * 3.412\n    let gas_kbtu = +utilities.gas.cons * 100\n    let steam_kbtu = +utilities.steam.cons * 1194\n    let fuel_two_kbtu = +utilities.fuel_two.cons * 138\n    let fuel_four_kbtu = +utilities.fuel_four.cons * 146\n    \n    let elec_carbon = elec_kbtu * 0.000084689\n    let gas_carbon = gas_kbtu * 0.00005311\n    let steam_carbon = steam_kbtu * 0.00004493\n    let fuel_two_carbon = fuel_two_kbtu * 0.00007421\n    let fuel_four_carbon = fuel_four_kbtu * 0.00007529\n  \n    let elec_cost = +utilities.elec.cons * +utilities.elec.rate\n    let gas_cost = +utilities.gas.cons * +utilities.gas.rate\n    let steam_cost = +utilities.steam.cons * +utilities.steam.rate\n    let fuel_two_cost = +utilities.fuel_two.cons * +utilities.fuel_two.rate\n    let fuel_four_cost = +utilities.fuel_four.cons * +utilities.fuel_four.rate\n  \n    let elec_kbtu_norm = elec_kbtu / area\n    let gas_kbtu_norm = gas_kbtu / area\n    let steam_kbtu_norm = steam_kbtu / area\n    let fuel_two_kbtu_norm = fuel_two_kbtu / area\n    let fuel_four_kbtu_norm = fuel_four_kbtu / area\n    \n    let elec_carbon_norm = elec_carbon / area \n    let gas_carbon_norm = gas_carbon / area\n    let steam_carbon_norm = steam_carbon / area\n    let fuel_two_carbon_norm = fuel_two_carbon / area\n    let fuel_four_carbon_norm = fuel_four_carbon / area\n  \n    let elec_cost_norm = elec_cost / area\n    let gas_cost_norm = gas_cost / area\n    let steam_cost_norm = steam_cost / area\n    let fuel_two_cost_norm = fuel_two_cost / area\n    let fuel_four_cost_norm = fuel_four_cost / area\n  \n    let total_cost = elec_cost + gas_cost + steam_cost + fuel_two_cost + fuel_four_cost\n    \n    let total_carbon = elec_carbon + gas_carbon + steam_carbon + fuel_two_carbon + fuel_four_carbon\n    let fine_2024 = total_carbon > co2limit_2024 ? (total_carbon - co2limit_2024) * fine_per_ton_co2 : 0;\n    let fine_2030 = total_carbon > co2limit_2030 ? (total_carbon - co2limit_2030) * fine_per_ton_co2 : 0;\n    let fine_2035 = total_carbon > co2limit_2035 ? (total_carbon - co2limit_2035) * fine_per_ton_co2 : 0;\n  \n    let compiled = {\n      summary: {\n        total_carbon: total_carbon,\n        total_cost: total_cost,\n        total_area: area,\n        co2limit_2024: co2limit_2024,\n        co2limit_2030: co2limit_2030,\n        co2limit_2035: co2limit_2035,\n        fine_2024: fine_2024,\n        fine_2030: fine_2030,\n        fine_2035: fine_2035\n      },\n  \n  \n      utilities: {\n        native: {\n          elec: +utilities.elec.cons,\n          gas: +utilities.gas.cons,\n          steam: +utilities.steam.cons,\n          fuel_two: +utilities.fuel_two.cons,\n          fuel_four: +utilities.fuel_four.cons,\n        },\n  \n        rates: {\n          elec: +utilities.elec.rate,\n          gas: +utilities.gas.rate,\n          steam: +utilities.steam.rate,\n          fuel_two: +utilities.fuel_two.rate,\n          fuel_four: +utilities.fuel_four.rate,\n        },\n  \n        kbtu: {\n          elec: elec_kbtu,\n          gas: gas_kbtu,\n          steam: steam_kbtu,\n          fuel_two: fuel_two_kbtu,\n          fuel_four: fuel_four_kbtu,\n        },\n  \n        carbon: {\n          elec: elec_carbon,\n          gas: gas_carbon,\n          steam: steam_carbon,\n          fuel_two: fuel_two_carbon,\n          fuel_four: fuel_four_carbon,\n        },\n  \n        cost: {\n          elec: elec_cost,\n          gas: gas_cost,\n          steam: steam_cost,\n          fuel_two: fuel_two_cost,\n          fuel_four: fuel_four_cost,\n        },\n  \n        cost_sf: {\n          elec: elec_cost_norm,\n          gas: gas_cost_norm,\n          steam: steam_cost_norm,\n          fuel_two: fuel_two_cost_norm,\n          fuel_four: fuel_four_cost_norm,\n        },\n  \n        kbtu_sf: {\n          elec: elec_kbtu_norm ,\n          gas: gas_kbtu_norm,\n          steam: steam_kbtu_norm,\n          fuel_two: fuel_two_kbtu_norm,\n          fuel_four: fuel_four_kbtu_norm,\n        },\n        carbon_sf: {\n          elec: elec_carbon_norm,\n          gas: gas_carbon_norm,\n          steam: steam_carbon_norm,\n          fuel_two: fuel_two_carbon_norm,\n          fuel_four: fuel_four_carbon_norm,\n        }\n      } \n  \n  \n    }\n  \n    return compiled\n  }\n  \n\n\nexport {compileBuilding}"]},"metadata":{},"sourceType":"module"}